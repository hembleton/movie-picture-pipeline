name: Frontend Continuous Deployment

on:
  push:
    branches: [main]
    paths:
      - 'starter/frontend/**'
  workflow_dispatch:

env:
  REACT_APP_MOVIE_API_URL: http://localhost:5000
  AWS_REGION: us-east-1
  ECR_REGISTRY: 607049766878.dkr.ecr.us-east-1.amazonaws.com
  ECR_REPO: frontend
  IMAGE_TAG: ${{ github.sha }}

jobs:
  test_job:
    name: Test Frontend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: latest

      - uses: actions/cache@v3
        with:
          path: starter/frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('starter/frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - run: cd starter/frontend && npm ci
      - run: cd starter/frontend && CI=true npm test

  lint_job:
    name: Lint Frontend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: latest

      - uses: actions/cache@v3
        with:
          path: starter/frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('starter/frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - run: cd starter/frontend && npm ci && npx eslint . --fix

  build_deploy_job:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    needs: [test_job, lint_job]

    steps:
      # Checkout code from repo
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up a Node.js environment using the specified node version.
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: latest

      # Install dependencies
      - name: Install dependencies
        run: cd starter/frontend && npm ci

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Tag and Push image to ECR
      - name: Tag and Push image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: frontend
          IMAGE_TAG: 0.1
          REACT_APP_MOVIE_API_URL: ${{ secrets.REACT_APP_MOVIE_API_URL }}
        run: |
          cd starter/frontend  # Navigate to the frontend directory
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG . --build-arg="REACT_APP_MOVIE_API_URL=$REACT_APP_MOVIE_API_URL"
          echo "docker build is success"
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # Configure AWS credentials for EKS access
      - name: Configure AWS credentials for EKS
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_2 }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_2 }}
          aws-region: us-east-1

      # Update the Kube config
      - name: Update the Kube config
        run: aws eks update-kubeconfig --name cluster --region us-east-1

      # Download kubectl binary and Deploy to EKS cluster
      - name: Download kubectl binary and Deploy to EKS
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          kubectl version --client
          cd starter/frontend
          kubectl apply -k k8s/
          kubectl get svc
          kubectl get pods